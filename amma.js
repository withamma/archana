// Generated by CoffeeScript 1.7.1
(function() {
  var app;

  app = angular.module("linear-learning", ["ngRoute", "ui.bootstrap", 'ngStorage', 'ngTouch', 'cfp.hotkeys', 'ngAnimate']);

  app.directive('backImg', function() {
    return function(scope, element, attrs) {
      return attrs.$observe("backImg", function(val) {
        return element.css({
          'background-image': "url(" + val + ")",
          "background-size": "cover"
        });
      });
    };
  });

  app.config(function($routeProvider) {
    return $routeProvider.when("/", {
      controller: "ItemListerCtrl",
      templateUrl: "templates/item-lister.template.html"
    }).when("/memorize/:itemId", {
      controller: "MemorizeCtrl",
      templateUrl: "templates/test.template.html"
    }).when("/howto/:itemId", {
      controller: "HowtoCtrl",
      templateUrl: "templates/howto.template.html"
    }).when("/results/:itemId", {
      controller: "ResultsCtrl",
      templateUrl: "templates/results.template.html"
    }).otherwise({
      redirectTo: "/"
    });
  });

  app.controller("NavBarCtrl", [
    "$scope", function($scope) {
      return $scope.isCollapsed = true;
    }
  ]);

  app.controller("ItemListerCtrl", [
    "$scope", "$http", "$sessionStorage", function($scope, $http, sessionStorage) {
      $http.get("learning-items.json").success(function(data) {
        return $scope.items = data;
      });
      $scope.url = function(id) {
        if ((sessionStorage["howtoCompleted"] != null)) {
          return "#/memorize/" + id;
        } else {
          return "#/howto/" + id;
        }
      };
      return $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
    }
  ]);

  app.controller("MemorizeCtrl", [
    "$scope", '$routeParams', '$http', "$location", '$localStorage', 'hotkeys', function($scope, $routeParams, $http, $location, storage, hotkeys) {
      var endAudio, id, incorrect, nextInLink, nextState, previousInLink;
      id = "" + $routeParams.itemId;
      $scope.state = "loading";
      $scope.hint = false;
      hotkeys.bindTo($scope).add({
        combo: 'u',
        description: 'Undo',
        callback: function() {
          return $scope.undo();
        }
      }).add({
        combo: 'c',
        description: 'Correct answer',
        callback: function() {
          return $scope.submitAnswer("correct");
        }
      }).add({
        combo: 'x',
        description: 'Wrong answer',
        callback: function() {
          return $scope.submitAnswer("incorrect");
        }
      }).add({
        combo: 'r',
        description: 'Restart',
        callback: function() {
          return $scope.restart();
        }
      }).add({
        combo: 's',
        description: 'Show Answer',
        callback: function() {
          return $scope.showAnswer();
        }
      }).add({
        combo: 'space',
        description: 'Show Answer',
        callback: function() {
          return $scope.showAnswer();
        }
      }).add({
        combo: 'm',
        description: 'Show Meaning',
        callback: function() {
          return $scope.toggleMeaning();
        }
      }).add({
        combo: 'h',
        description: 'Show Hint',
        callback: function() {
          return $scope.showHint();
        }
      });
      $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
      if (storage[id] == null) {
        storage[id] = {};
        storage[id]["currentPosition"] = 0;
        storage[id]["displayMeaning"] = false;
        storage[id]["incorrect"] = [];
      }
      incorrect = storage[id]["incorrect"];
      $scope.currentPosition = storage[id]["currentPosition"];
      $scope.displayMeaning = storage[id]["displayMeaning"];
      if (storage[id].listToLearn != null) {
        $scope.listToLearn = storage[id].listToLearn;
        $scope.listOfMeaning = storage[id].listOfMeaning;
        $scope.title = storage[id].title;
        $scope.state = "show";
      } else {
        $http.get("learn/" + $routeParams.itemId + ".json").success(function(data) {
          storage[id].listToLearn = data.listToLearn;
          storage[id].listOfMeaning = data.listOfMeaning;
          storage[id].title = data.title;
          $scope.listToLearn = data.listToLearn;
          $scope.listOfMeaning = data.listOfMeaning;
          $scope.title = data.title;
          return $scope.state = "show";
        });
      }
      endAudio = new Audio("sounds/3oms.mp3");
      $scope.showAnswer = function() {
        return $scope.state = "answer";
      };
      $scope.toggleMeaning = function() {
        return $scope.displayMeaning = !$scope.displayMeaning;
      };
      nextState = function() {
        $scope.hint = false;
        if ($scope.currentPosition + 2 < $scope.listToLearn.length) {
          $scope.currentPosition += 1;
          storage[id]["currentPosition"] = $scope.currentPosition;
          return $scope.state = "show";
        } else {
          $scope.state = "end";
          return endAudio.play();
        }
      };
      $scope.showHint = function() {
        return $scope.hint = true;
      };
      $scope.getHint = function() {
        return nextInLink().slice(0, 10);
      };
      $scope.submitAnswer = function(result) {
        if ($scope.state === "answer") {
          if (result !== "correct") {
            incorrect.push($scope.currentPosition);
          }
          return nextState();
        }
      };
      previousInLink = function(meaning) {
        if ((meaning != null)) {
          return $scope.listOfMeaning[$scope.currentPosition];
        } else {
          return $scope.listToLearn[$scope.currentPosition];
        }
      };
      nextInLink = function(meaning) {
        if ((meaning != null)) {
          return $scope.listOfMeaning[$scope.currentPosition + 1];
        } else {
          return $scope.listToLearn[$scope.currentPosition + 1];
        }
      };
      $scope.linkPrevious = function() {
        if ($scope.state !== "loading") {
          return previousInLink();
        } else {
          return "Loading";
        }
      };
      $scope.linkTest = function() {
        if ($scope.state === "loading") {
          return "Loading";
        } else if ($scope.state === "answer") {
          return nextInLink();
        } else {
          return previousInLink();
        }
      };
      $scope.meaningPrevious = function() {
        return previousInLink(true);
      };
      $scope.meaningTest = function() {
        if ($scope.state === "answer") {
          return nextInLink(true);
        } else {
          return "";
        }
      };
      $scope.showResults = function() {
        return $location.path("results/" + id);
      };
      $scope.restart = function() {
        storage[id]["currentPosition"] = 0;
        storage[id]["incorrect"] = [];
        $scope.currentPosition = storage[id]["currentPosition"];
        incorrect = storage[id]["incorrect"];
        return $scope.state = "show";
      };
      if (storage[id].restart === true) {
        $scope.restart();
        storage[id].restart = false;
      }
      return $scope.undo = function() {
        if ($scope.currentPosition > -1) {
          if (incorrect.length > 0 && incorrect[incorrect.length - 1] === $scope.currentPosition) {
            incorrect.pop();
          }
          $scope.currentPosition -= 1;
          return $scope.state = "answer";
        }
      };
    }
  ]);

  app.controller("HowtoCtrl", [
    "$scope", "$sessionStorage", '$routeParams', '$location', function($scope, storage, $routeParams, $location) {
      return $scope["continue"] = function() {
        storage["howtoCompleted"] = true;
        return $location.path("/memorize/" + $routeParams.itemId);
      };
    }
  ]);

  app.controller("ResultsCtrl", [
    "$scope", "$localStorage", '$routeParams', '$http', 'dateFilter', "$window", function($scope, storage, $routeParams, $http, dateFilter, $window) {
      var history, now, state, today;
      $scope.id = "" + $routeParams.itemId;
      state = storage[$scope.id];
      $scope.buttonColor = "btn-primary";
      $scope.incorrect = state.incorrect.map(function(id) {
        return {
          next: state.listToLearn[id + 1],
          previous: state.listToLearn[id]
        };
      });
      $scope.quizletText = "Export to Quizlet";
      storage[$scope.id].restart = true;
      $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
      if (storage[$scope.id].history == null) {
        storage[$scope.id].history = {};
      }
      now = new Date();
      history = storage[$scope.id].history;
      history[now] = {
        incorrect: state.incorrect.slice(0)
      };
      $scope.exportQuizlet = function() {
        if ($scope.quizletUrl == null) {
          return $http.post("http://amma-archana.herokuapp.com/quizlet.php", {
            "title": "" + $scope.id + " - " + (today()),
            "terms": $scope.incorrect.map(function(term) {
              return term.previous;
            }),
            "definitions": $scope.incorrect.map(function(term) {
              return term.next;
            }),
            "lang_terms": "en",
            "lang_definitions": "en",
            "allow_discussion": 0,
            "visibility": "public"
          }).success(function(data) {
            history[now].quizletUrl = data["url"];
            console.log(data);
            $scope.buttonColor = "btn-success";
            $scope.quizletUrl = data["url"];
            $scope.quizletText = "Checkout your deck!";
            return console.log(data["url"]);
          }).error(function() {
            $scope.buttonColor = "btn-danger";
            $scope.quizletUrl = "";
            return $scope.quizletText = "Could not create deck. Please copy result and learn on your own.";
          });
        } else {
          return $window.open($scope.quizletUrl);
        }
      };
      return today = function() {
        return dateFilter(new Date(), "MMM dd yyyy");
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=amma.map
