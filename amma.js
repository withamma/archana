// Generated by CoffeeScript 1.7.1
var app;

app = angular.module("linear-learning", ["ngRoute", "ui.bootstrap", 'ngStorage', 'ngTouch', 'cfp.hotkeys']);

app.config(function($routeProvider) {
  return $routeProvider.when("/", {
    controller: "ItemListerCtrl",
    templateUrl: "templates/item-lister.template.html"
  }).when("/memorize/:itemId", {
    controller: "MemorizeCtrl",
    templateUrl: "templates/test.template.html"
  }).when("/howto/:itemId", {
    controller: "HowtoCtrl",
    templateUrl: "templates/howto.template.html"
  }).when("/results/:itemId", {
    controller: "ResultsCtrl",
    templateUrl: "templates/results.template.html"
  }).otherwise({
    redirectTo: "/"
  });
});

app.controller("NavBarCtrl", [
  "$scope", function($scope) {
    return $scope.isCollapsed = true;
  }
]);

app.controller("ItemListerCtrl", [
  "$scope", "$http", "$sessionStorage", function($scope, $http, sessionStorage) {
    $http.get("learning-items.json").success(function(data) {
      return $scope.items = data;
    });
    $scope.url = function(id) {
      if ((sessionStorage["howtoCompleted"] != null)) {
        return "#/memorize/" + id;
      } else {
        return "#/howto/" + id;
      }
    };
    return $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
  }
]);

app.controller("MemorizeCtrl", [
  "$scope", '$routeParams', '$http', "$location", '$localStorage', 'hotkeys', function($scope, $routeParams, $http, $location, storage, hotkeys) {
    var id, incorrect, nextInLink, nextState, previousInLink;
    id = "" + $routeParams.itemId;
    $scope.state = "loading";
    hotkeys.bindTo($scope).add({
      combo: 'u',
      description: 'Undo',
      callback: function() {
        return $scope.undo();
      }
    }).add({
      combo: 'c',
      description: 'Correct answer',
      callback: function() {
        return $scope.submitAnswer("correct");
      }
    }).add({
      combo: 'x',
      description: 'Wrong answer',
      callback: function() {
        return $scope.submitAnswer("incorrect");
      }
    }).add({
      combo: 'r',
      description: 'Restart',
      callback: function() {
        return $scope.restart();
      }
    }).add({
      combo: 's',
      description: 'Show Answer',
      callback: function() {
        return $scope.showAnswer();
      }
    }).add({
      combo: 'space',
      description: 'Show Answer',
      callback: function() {
        return $scope.showAnswer();
      }
    }).add({
      combo: 'm',
      description: 'Show Meaning',
      callback: function() {
        return $scope.toggleMeaning();
      }
    });
    $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
    if (storage[id] == null) {
      storage[id] = {};
      storage[id]["currentPosition"] = 0;
      storage[id]["displayMeaning"] = false;
    }
    storage[id]["incorrect"] = [];
    $scope.currentPosition = storage[id]["currentPosition"];
    incorrect = storage[id]["incorrect"];
    $scope.displayMeaning = storage[id]["displayMeaning"];
    $http.get("learn/" + $routeParams.itemId + ".json").success(function(data) {
      $scope.listToLearn = data.list;
      $scope.title = data.title;
      $scope.state = "show";
      return $scope.listMeaning = data.meaning_list;
    });
    $scope.showAnswer = function() {
      return $scope.state = "answer";
    };
    $scope.toggleMeaning = function() {
      return $scope.displayMeaning = !$scope.displayMeaning;
    };
    nextState = function() {
      if ($scope.currentPosition + 2 < $scope.listToLearn.length) {
        $scope.currentPosition += 1;
        storage[id]["currentPosition"] = $scope.currentPosition;
        return $scope.state = "show";
      } else {
        $scope.state = "end";
        new Audio("sounds/3oms.mp3").play();
        return storage[id]["currentPosition"] = 0;
      }
    };
    $scope.submitAnswer = function(result) {
      if ($scope.state === "answer") {
        if (result !== "correct") {
          incorrect.push({
            "previous": previousInLink(),
            "next": nextInLink(),
            "id": $scope.currentPosition
          });
        }
        return nextState();
      }
    };
    previousInLink = function(meaning) {
      if ((meaning != null)) {
        return $scope.listMeaning[$scope.currentPosition];
      } else {
        return $scope.listToLearn[$scope.currentPosition];
      }
    };
    nextInLink = function(meaning) {
      if ((meaning != null)) {
        return $scope.listMeaning[$scope.currentPosition + 1];
      } else {
        return $scope.listToLearn[$scope.currentPosition + 1];
      }
    };
    $scope.linkPrevious = function() {
      if ($scope.state !== "loading") {
        return previousInLink();
      } else {
        return "Loading";
      }
    };
    $scope.linkTest = function() {
      if ($scope.state === "answer") {
        return nextInLink();
      } else {
        return "?";
      }
    };
    $scope.meaningPrevious = function() {
      return previousInLink(true);
    };
    $scope.meaningTest = function() {
      if ($scope.state === "answer") {
        return nextInLink(true);
      } else {
        return "";
      }
    };
    $scope.showResults = function() {
      return $location.path("results/" + id);
    };
    $scope.restart = function() {
      storage[id] = {};
      storage[id]["currentPosition"] = 0;
      storage[id]["incorrect"] = [];
      $scope.currentPosition = storage[id]["currentPosition"];
      incorrect = storage[id]["incorrect"];
      return $scope.state = "show";
    };
    return $scope.undo = function() {
      if ($scope.currentPosition !== 0) {
        if (incorrect.length > 0 && incorrect[incorrect.length - 1].id === $scope.currentPosition) {
          incorrect.pop();
        }
        return $scope.currentPosition -= 1;
      }
    };
  }
]);

app.controller("HowtoCtrl", [
  "$scope", "$sessionStorage", '$routeParams', '$location', function($scope, storage, $routeParams, $location) {
    return $scope["continue"] = function() {
      storage["howtoCompleted"] = true;
      return $location.path("/memorize/" + $routeParams.itemId);
    };
  }
]);

app.controller("ResultsCtrl", [
  "$scope", "$localStorage", '$routeParams', '$http', 'dateFilter', "$window", function($scope, storage, $routeParams, $http, dateFilter, $window) {
    var today;
    $scope.id = "" + $routeParams.itemId;
    $scope.buttonColor = "btn-primary";
    $scope.incorrect = storage[$scope.id]["incorrect"];
    $scope.quizletText = "Export to Quizlet";
    $http.get("http://amma-archana.herokuapp.com/page-does-not-exist");
    $scope.exportQuizlet = function() {
      if ($scope.quizletUrl == null) {
        return $http.post("http://amma-archana.herokuapp.com/quizlet.php", {
          "title": "" + $scope.id + " - " + (today()),
          "terms": $scope.incorrect.map(function(term) {
            return term.previous;
          }),
          "definitions": $scope.incorrect.map(function(term) {
            return term.next;
          }),
          "lang_terms": "en",
          "lang_definitions": "en",
          "allow_discussion": 0,
          "visibility": "public"
        }).success(function(data) {
          console.log(data);
          $scope.buttonColor = "btn-success";
          $scope.quizletUrl = data["url"];
          $scope.quizletText = "Checkout your deck!";
          return console.log(data["url"]);
        }).error(function() {
          $scope.buttonColor = "btn-danger";
          $scope.quizletUrl = "";
          return $scope.quizletText = "Could not create deck. Please copy result and learn on your own.";
        });
      } else {
        return $window.open($scope.quizletUrl);
      }
    };
    return today = function() {
      return dateFilter(new Date(), "MMM dd yyyy");
    };
  }
]);
