// Generated by CoffeeScript 1.7.1
var app;

app = angular.module("linear-learning", ["ngRoute", "ngFitText", "ui.bootstrap", 'ngStorage']);

app.config(function($routeProvider) {
  return $routeProvider.when("/", {
    controller: "ItemListerCtrl",
    templateUrl: "item-lister.template"
  }).when("/memorize/:itemId", {
    controller: "MemorizeCtrl",
    templateUrl: "test.template"
  }).when("/results/:itemId", {
    controller: "ResultsCtrl",
    templateUrl: "results.template"
  }).otherwise({
    redirectTo: "/"
  });
});

app.controller("NavBarCtrl", [
  "$scope", function($scope) {
    return $scope.isCollapsed = true;
  }
]);

app.controller("ItemListerCtrl", [
  "$scope", "$http", function($scope, $http) {
    $http.get("learning-items.json").success(function(data) {
      return $scope.items = data;
    });
    return $http.get("http://amma-archana.herokuapp.com/quizlet.php");
  }
]);

app.controller("MemorizeCtrl", [
  "$scope", '$routeParams', '$http', "$location", '$localStorage', function($scope, $routeParams, $http, $location, storage) {
    var id, incorrect, nextInLink, nextState, previousInLink;
    id = "" + $routeParams.itemId;
    $scope.state = "loading";
    $http.get("http://amma-archana.herokuapp.com/quizlet.php");
    if (storage[id] == null) {
      storage[id] = {};
      storage[id]["currentPosition"] = 0;
    }
    storage[id]["incorrect"] = [];
    $scope.currentPosition = storage[id]["currentPosition"];
    incorrect = storage[id]["incorrect"];
    $http.get("learn/" + $routeParams.itemId + ".json").success(function(data) {
      $scope.listToLearn = data.list;
      $scope.title = data.title;
      return $scope.state = "show";
    });
    $scope.showAnswer = function() {
      return $scope.state = "answer";
    };
    nextState = function() {
      if ($scope.currentPosition + 2 < $scope.listToLearn.length) {
        $scope.currentPosition += 1;
        storage[id]["currentPosition"] = $scope.currentPosition;
        return $scope.state = "show";
      } else {
        $scope.state = "end";
        new Audio("sounds/victory_fanfare.mp3").play();
        return storage[id]["currentPosition"] = 0;
      }
    };
    $scope.submitAnswer = function(result) {
      if (result !== "correct") {
        incorrect.push({
          "previous": previousInLink(),
          "next": nextInLink()
        });
      }
      return nextState();
    };
    previousInLink = function() {
      return $scope.listToLearn[$scope.currentPosition];
    };
    nextInLink = function() {
      return $scope.listToLearn[$scope.currentPosition + 1];
    };
    $scope.linkPrevious = function() {
      if ($scope.state !== "loading") {
        return previousInLink();
      } else {
        return "Loading";
      }
    };
    $scope.linkTest = function() {
      if ($scope.state === "answer") {
        return nextInLink();
      } else {
        return "?";
      }
    };
    $scope.showResults = function() {
      return $location.path("results/" + id);
    };
    return $scope.restart = function() {
      storage[id] = {};
      storage[id]["currentPosition"] = 0;
      storage[id]["incorrect"] = [];
      $scope.currentPosition = storage[id]["currentPosition"];
      incorrect = storage[id]["incorrect"];
      return $scope.state = "show";
    };
  }
]);

app.controller("ResultsCtrl", [
  "$scope", "$localStorage", '$routeParams', '$http', 'dateFilter', "$window", function($scope, storage, $routeParams, $http, dateFilter, $window) {
    var today;
    $scope.id = "" + $routeParams.itemId;
    $scope.buttonColor = "btn-primary";
    $scope.incorrect = storage[$scope.id]["incorrect"];
    $scope.quizletText = "Export to Quizlet";
    $scope.exportQuizlet = function() {
      if ($scope.quizletUrl == null) {
        return $http.post("http://amma-archana.herokuapp.com/quizlet.php", {
          "title": "" + $scope.id + " - " + (today()),
          "terms": $scope.incorrect.map(function(term) {
            return term.previous;
          }),
          "definitions": $scope.incorrect.map(function(term) {
            return term.next;
          }),
          "lang_terms": "en",
          "lang_definitions": "en",
          "allow_discussion": 0,
          "visibility": "public"
        }).success(function(data) {
          console.log(data);
          $scope.buttonColor = "btn-success";
          $scope.quizletUrl = data["url"];
          $scope.quizletText = "Checkout your deck!";
          return console.log(data["url"]);
        }).error(function() {
          $scope.buttonColor = "btn-danger";
          $scope.quizletUrl = "";
          return $scope.quizletText = "Could not create deck. Please copy result and learn on your own.";
        });
      } else {
        return $window.open($scope.quizletUrl);
      }
    };
    return today = function() {
      return dateFilter(new Date(), "MMM dd yyyy");
    };
  }
]);
